<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\dbg\lesson.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\dbg\lesson.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Wed Aug  4 18:57:41 2021
<BR><P>
<H3>Maximum Stack Usage =        204 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d7]">OS_CPU_FP_Reg_Push</a>
 <LI><a href="#[d9]">OS_CPU_FP_Reg_Pop</a>
 <LI><a href="#[a9]">OS_CPU_SR_Save</a>
 <LI><a href="#[aa]">OS_CPU_SR_Restore</a>
 <LI><a href="#[92]">OSStartHighRdy</a>
 <LI><a href="#[e0]">OSCtxSw</a>
 <LI><a href="#[b7]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC1Seq0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3a]">ADC1Seq1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3b]">ADC1Seq2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3c]">ADC1Seq3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[18]">ADCSeq0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[19]">ADCSeq1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1a]">ADCSeq2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1b]">ADCSeq3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[78]">Active_eventLoop</a> from uc_ao.o(.text.Active_eventLoop) referenced from uc_ao.o(.text.Active_start)
 <LI><a href="#[79]">BlinkyButton_dispatch</a> from main.o(.text.BlinkyButton_dispatch) referenced from main.o(.text.BlinkyButton_ctor)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[31]">CAN0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[32]">CAN1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[33]">CAN2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[23]">Comp0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[24]">Comp1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[25]">Comp2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[27]">FlashCtrl_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[a]">GPIOPortA_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[b]">GPIOPortB_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[c]">GPIOPortC_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[d]">GPIOPortD_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[e]">GPIOPortE_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[28]">GPIOPortF_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[29]">GPIOPortG_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2a]">GPIOPortH_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3d]">GPIOPortJ_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3e]">GPIOPortK_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3f]">GPIOPortL_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5c]">GPIOPortM_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5d]">GPIOPortN_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5f]">GPIOPortP0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[60]">GPIOPortP1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[61]">GPIOPortP2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[62]">GPIOPortP3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[63]">GPIOPortP4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[64]">GPIOPortP5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[65]">GPIOPortP6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[66]">GPIOPortP7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[67]">GPIOPortQ0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[68]">GPIOPortQ1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[69]">GPIOPortQ2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6a]">GPIOPortQ3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6b]">GPIOPortQ4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6c]">GPIOPortQ5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6d]">GPIOPortQ6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6f]">GPIOPortR_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[70]">GPIOPortS_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[34]">Hibernate_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2f]">I2C1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[47]">I2C2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[48]">I2C3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5a]">I2C4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5b]">I2C5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[7d]">OSTmr_Task</a> from os_tmr.o(.text.OSTmr_Task) referenced from os_tmr.o(.text.OSTmr_Init)
 <LI><a href="#[7a]">OS_TaskIdle</a> from os_core.o(.text.OS_TaskIdle) referenced from os_core.o(.text.OSInit)
 <LI><a href="#[7c]">OS_TaskReturn</a> from os_task.o(.text.OS_TaskReturn) referenced from os_cpu_c.o(.text.OSTaskStkInit)
 <LI><a href="#[7b]">OS_TaskStat</a> from os_core.o(.text.OS_TaskStat) referenced from os_core.o(.text.OSInit)
 <LI><a href="#[75]">PWM1Fault_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[71]">PWM1Gen0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[72]">PWM1Gen1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[73]">PWM1Gen2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[74]">PWM1Gen3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[13]">PWMFault_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[14]">PWMGen0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[15]">PWMGen1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[16]">PWMGen2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[36]">PWMGen3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[17]">QEI0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[30]">QEI1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5e]">QEI2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[11]">SSI0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2c]">SSI1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[40]">SSI2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[41]">SSI3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[26]">SysCtrl_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os_cpu_c.o(.text.SysTick_Handler) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_tm4c123gh6pm.o(.text.SystemInit) referenced from startup_tm4c123gh6pm.o(.text)
 <LI><a href="#[1d]">Timer0A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1e]">Timer0B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1f]">Timer1A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[20]">Timer1B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[21]">Timer2A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[22]">Timer2B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2d]">Timer3A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2e]">Timer3B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[49]">Timer4A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4a]">Timer4B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4b]">Timer5A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4c]">Timer5B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2b]">UART2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[42]">UART3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[44]">UART5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[45]">UART6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[46]">UART7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[35]">USB0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1c]">Watchdog_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4d]">WideTimer0A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4e]">WideTimer0B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4f]">WideTimer1A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[50]">WideTimer1B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[51]">WideTimer2A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[52]">WideTimer2B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[53]">WideTimer3A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[54]">WideTimer3B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[55]">WideTimer4A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[56]">WideTimer4B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[57]">WideTimer5A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[58]">WideTimer5B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[77]">__main</a> from __main.o(!!!main) referenced from startup_tm4c123gh6pm.o(.text)
 <LI><a href="#[38]">uDMAError_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[37]">uDMAST_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[82]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[83]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[89]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[84]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[81]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[86]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[108]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC1Seq0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1Seq1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADCSeq0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADCSeq1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADCSeq2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADCSeq3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Comp0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Comp1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FlashCtrl_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOPortA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOPortB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIOPortF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOPortG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIOPortJ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOPortK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOPortL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIOPortM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIOPortN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIOPortP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIOPortP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOPortP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOPortP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOPortP5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortP6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortQ4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortQ5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortQ6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Hibernate_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PWM1Gen0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1Gen1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1Gen2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1Gen3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWMFault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWMGen0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWMGen1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWMGen2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PWMGen3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>QEI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SSI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SSI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SSI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SysCtrl_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Timer0A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Timer1A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer1B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer2A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Timer3A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Timer3B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Timer4A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Timer4B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Timer5A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Timer5B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>WideTimer0A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WideTimer0B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WideTimer1A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WideTimer1B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer2A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer2B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer3A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer3B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer4A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer4B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer5A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer5B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>uDMAError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>uDMAST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_IRQHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[d7]"></a>OS_CPU_FP_Reg_Push</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[d9]"></a>OS_CPU_FP_Reg_Pop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[a9]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_ctor
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_arm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[aa]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_ctor
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_arm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[92]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStartHighRdy &rArr; OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[e0]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[b7]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[110]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[111]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>Active_ctor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_ao.o(.text.Active_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_ctor
</UL>

<P><STRONG><a name="[113]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>Active_post</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uc_ao.o(.text.Active_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_tick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[99]"></a>Active_start</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, uc_ao.o(.text.Active_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = Active_start &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[c9]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[ce]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[d0]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[d2]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[d4]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[d8]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[9c]"></a>App_TimeTickHook</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp.o(.text.App_TimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = App_TimeTickHook &rArr; TimeEvent_tick &rArr; Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_tick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_post
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[9e]"></a>BSP_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp.o(.text.BSP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>BSP_ledBlueOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text.BSP_ledBlueOff))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_dispatch
</UL>

<P><STRONG><a name="[a5]"></a>BSP_ledBlueOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(.text.BSP_ledBlueOn))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_dispatch
</UL>

<P><STRONG><a name="[a4]"></a>BSP_ledGreenOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text.BSP_ledGreenOff))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_dispatch
</UL>

<P><STRONG><a name="[a6]"></a>BSP_ledGreenOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(.text.BSP_ledGreenOn))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_dispatch
</UL>

<P><STRONG><a name="[e6]"></a>BSP_start</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp.o(.text.BSP_start))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>BlinkyButton_ctor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.BlinkyButton_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BlinkyButton_ctor &rArr; TimeEvent_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_ctor
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>OSDebugInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_dbg.o(.text.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a8]"></a>OSEventNameSet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_core.o(.text.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[ab]"></a>OSInit</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, os_core.o(.text.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>OSInitHookBegin</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b3]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e4]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b5]"></a>OSIntExit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_core.o(.text.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9a]"></a>OSQCreate</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_q.o(.text.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_start
</UL>

<P><STRONG><a name="[96]"></a>OSQPend</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, os_q.o(.text.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_eventLoop
</UL>

<P><STRONG><a name="[98]"></a>OSQPost</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_q.o(.text.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_post
</UL>

<P><STRONG><a name="[bd]"></a>OSSchedLock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(.text.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[be]"></a>OSSchedUnlock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_core.o(.text.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[bf]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(.text.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c0]"></a>OSSemPend</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, os_sem.o(.text.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c1]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(.text.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[c2]"></a>OSStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(.text.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OSStartHighRdy &rArr; OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>OSTCBInitHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTCBInitHook))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[9b]"></a>OSTaskCreateExt</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, os_task.o(.text.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c8]"></a>OSTaskCreateHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTaskCreateHook))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[ca]"></a>OSTaskDel</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, os_task.o(.text.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[cd]"></a>OSTaskDelHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTaskDelHook))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[cf]"></a>OSTaskIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTaskIdleHook))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[b1]"></a>OSTaskNameSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_task.o(.text.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[d1]"></a>OSTaskReturnHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTaskReturnHook))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskStatHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text.OSTaskStatHook))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d5]"></a>OSTaskStkChk</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, os_task.o(.text.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[c6]"></a>OSTaskStkInit</STRONG> (Thumb, 320 bytes, Stack size 28 bytes, os_cpu_c.o(.text.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[d6]"></a>OSTaskSuspend</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[93]"></a>OSTaskSwHook</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_cpu_c.o(.text.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Pop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_FP_Reg_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[da]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(.text.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[db]"></a>OSTimeTick</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, os_core.o(.text.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; TimeEvent_tick &rArr; Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[dc]"></a>OSTimeTickHook</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_cpu_c.o(.text.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; App_TimeTickHook &rArr; TimeEvent_tick &rArr; Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[dd]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[b2]"></a>OSTmr_Init</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, os_tmr.o(.text.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cc]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[bc]"></a>OS_EventTaskRdy</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_core.o(.text.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[bb]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[b9]"></a>OS_EventTaskWait</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(.text.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[b8]"></a>OS_EventWaitListInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[ae]"></a>OS_FlagInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_flag.o(.text.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cb]"></a>OS_FlagUnlink</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_flag.o(.text.OS_FlagUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[ad]"></a>OS_MemClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_core.o(.text.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[af]"></a>OS_MemInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_mem.o(.text.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b0]"></a>OS_QInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_q.o(.text.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ba]"></a>OS_Sched</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(.text.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[c7]"></a>OS_TCBInit</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_core.o(.text.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[7a]"></a>OS_TaskIdle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(.text.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text.OSInit)
</UL>
<P><STRONG><a name="[7c]"></a>OS_TaskReturn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_task.o(.text.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text.OSTaskStkInit)
</UL>
<P><STRONG><a name="[7b]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_core.o(.text.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text.OSInit)
</UL>
<P><STRONG><a name="[e2]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, os_core.o(.text.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c5]"></a>OS_TaskStkClr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_task.o(.text.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[91]"></a>Q_onAssert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(.text.Q_onAssert))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_eventLoop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_ctor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_tick
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_cpu_c.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; TimeEvent_tick &rArr; Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, system_tm4c123gh6pm.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOscClk
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, system_tm4c123gh6pm.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>TimeEvent_arm</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uc_ao.o(.text.TimeEvent_arm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TimeEvent_arm
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_dispatch
</UL>

<P><STRONG><a name="[a2]"></a>TimeEvent_ctor</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uc_ao.o(.text.TimeEvent_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TimeEvent_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_ctor
</UL>

<P><STRONG><a name="[9d]"></a>TimeEvent_tick</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uc_ao.o(.text.TimeEvent_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TimeEvent_tick &rArr; Active_post &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_post
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[8b]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkyButton_ctor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[85]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[114]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[115]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[79]"></a>BlinkyButton_dispatch</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(.text.BlinkyButton_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BlinkyButton_dispatch &rArr; TimeEvent_arm
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeEvent_arm
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenOn
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenOff
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueOn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.BlinkyButton_ctor)
</UL>
<P><STRONG><a name="[78]"></a>Active_eventLoop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uc_ao.o(.text.Active_eventLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Active_eventLoop &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_ao.o(.text.Active_start)
</UL>
<P><STRONG><a name="[e5]"></a>getOscClk</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_tm4c123gh6pm.o(.text.getOscClk))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[b6]"></a>OS_SchedNew</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[df]"></a>OSTmr_Link</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, os_tmr.o(.text.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[7d]"></a>OSTmr_Task</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, os_tmr.o(.text.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text.OSTmr_Init)
</UL>
<P><STRONG><a name="[de]"></a>OSTmr_Unlink</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_tmr.o(.text.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
